function [results,ML_Models,trainingTime] = ml_model_generation(trainingBigSet,testBigSet,...
                                            controlParamsStruct,mlParamsStruct,mOrderStruct)
%ML_MODEL_GENERATION ML generation main function
% This functions arranges input/output data according to specified options
% builds the specified ML model and ultimately calculates performance
% metrics for the built model. This function is intended for thickener
% only.
% Inputs:
%   - trainingBigSet: struct with fields CV,MV,DV of the time series
%   (already aggregated to the desired model resolution) for training
%   - testBigSet: struct with fields CV,MV,DV of the time series
%   (already aggregated to the desired model resolution) for testing
%   - controlParamsStruct: struct containing parameters of system and
%   control characteristics
%   - mlParamsStruct: struct containing parameters for the machine learning
%   algorithms
%   - mOrderStruct: struct containing parameters of the order (delays in U
%   and Y) for the model being build

%% Arrannge and prepare IO Data for training
[trainingSubset,~] = ml_prepare_IO_data(trainingBigSet,...
                                    controlParamsStruct.nameInputs,...
                                    controlParamsStruct.nameOutputs,...
                                    1, controlParamsStruct.tau_R,...
                                    mlParamsStruct.trainingSamples,...
                                    mOrderStruct.na, mOrderStruct.nb,....
                                    mlParamsStruct,0);
%% Hyperparameter Optimization
% If specified in optimizeBool
switch mlParamsStruct.mlMethod
    case 'RF'
        bestHyp = ml_optimize_hyperParams(trainingSubset,...
                                        controlParamsStruct.dimsSystem(1),...
                                        mlParamsStruct.trainingParamsArray,...
                                        mlParamsStruct.optimizeParams.hyperparametersRF,...
                                        mlParamsStruct.optimizeParams.optimizeBool);
    case 'SS'
        % Under construction
        bestHyp(1) = -1;
    case 'ARMAX'
        bestHyp(1) = mOrderStruct.na;
        bestHyp(2) = mOrderStruct.nb;
        bestHyp(3) = mOrderStruct.nc;
        bestHyp(4) = mOrderStruct.nk;
end
%% Generate Machine Learning Model

switch mlParamsStruct.mlMethod
    
    case 'RF'
        auxTrainingSubset = trainingSubset;
        for j = 0:(controlParamsStruct.N_y-1) % j = 0 is already 1-ahead
            fprintf('Generating Machine Learning Model for step %d\r\n',(j+1));
            
            tic;
            ML_Models(j+1) = ml_learn_model(controlParamsStruct.dimsSystem(1),...
                                        auxTrainingSubset,...
                                        bestHyp,...
                                        mlParamsStruct);
            % Rearrange predictors
            auxTrainingSubset = ml_prepare_IO_data(trainingBigSet,...
                                            controlParamsStruct.nameInputs,...
                                            controlParamsStruct.nameOutputs,...
                                            1, controlParamsStruct.tau_R,...
                                            mlParamsStruct.trainingSamples,...
                                            mOrderStruct.na, mOrderStruct.nb,....
                                            mlParamsStruct,j+1);
            trainingTime(j+1) = toc;
        end
    case 'ARMAX'
        fprintf('Generating Machine Learning Model\r\n');
        tic;
        ML_Models = ml_learn_model(controlParamsStruct.dimsSystem(1),...
                                    trainingSubset,...
                                    bestHyp,...
                                    mlParamsStruct);
    
end
%% Test & Validation Data

[testSubset,~] = ml_prepare_IO_data(testBigSet,...
                                controlParamsStruct.nameInputs,...
                                controlParamsStruct.nameOutputs,...
                                1, controlParamsStruct.tau_R,...
                                mlParamsStruct.validationSamples,...
                                mOrderStruct.na, mOrderStruct.nb,....
                                mlParamsStruct,0);
%% Prediction and Comparison
fprintf("Evaluating performance criteria...\r\n")

            
results = ml_validate_model(testSubset,ML_Models,...
                            controlParamsStruct.dimsSystem(1),...
                            controlParamsStruct.N_y,...
                            controlParamsStruct.tau_R,...
                            mOrderStruct.na,...
                            mlParamsStruct);

end
